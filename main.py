#!/usr/bin/env python3
"""
Coding Agent - Un agente de IA aut√≥nomo para tareas de programaci√≥n
Enhanced with reflection techniques and human-in-the-loop capabilities
"""

import argparse
import sys
import re
import json
from pathlib import Path

from model_loader import load_model, generate_response, load_model_config, list_available_models, select_model
import tools

# Import reflection and human loop systems
try:
    from reflection import CodeReflector, format_reflection_results, ReflectionType
    from human_loop import HumanInTheLoop, create_human_loop
    ADVANCED_FEATURES = True
except ImportError:
    ADVANCED_FEATURES = False
    print("‚ö†Ô∏è Advanced features (reflection/human-loop) not available")


def parse_action(model_response):
    """
    Analiza la respuesta del modelo para encontrar una llamada a una herramienta.
    Busca un patr√≥n como: Action: function_name(arg1, arg2)
    """
    # Patr√≥n Regex para buscar: Action: nombre_funcion(argumentos)
    match = re.search(r"Action:\s*(\w+)\((.*?)\)", model_response, re.DOTALL)
    
    if match:
        function_name = match.group(1)
        args_str = match.group(2)
        
        # Limpieza simple de argumentos
        if args_str.strip():
            args = [arg.strip().strip("'\"") for arg in args_str.split(',')]
        else:
            args = []
        
        return function_name, args
    
    return None, None


def build_prompt(user_goal, conversation_history, reflection_enabled=True, language="es"):
    """Construye el prompt para el modelo."""
    
    if language == "es":
        system_msg = """
Eres un agente de IA aut√≥nomo especializado en tareas de programaci√≥n y desarrollo de alta calidad.

REGLAS FUNDAMENTALES:
1. SIEMPRE piensa paso a paso antes de actuar
2. Usa las herramientas disponibles para completar la tarea
3. SIEMPRE verifica el resultado de tus acciones
4. Si algo falla, intenta una soluci√≥n alternativa
5. MANT√âN la calidad del c√≥digo como prioridad m√°xima
"""
        
        if reflection_enabled and ADVANCED_FEATURES:
            system_msg += """
6. USA las herramientas de reflexi√≥n para evaluar la calidad del c√≥digo:
   - analyze_code_quality() para an√°lisis completo
   - lint_code() para verificar errores de sintaxis y estilo
   - check_best_practices() para mejores pr√°cticas
   - check_solid_principles() para principios SOLID
   - check_dry_principle() para principio DRY
   - run_tests() para verificar que los tests pasen
7. NUNCA entregues c√≥digo sin haberlo verificado con las herramientas de calidad
8. Si el an√°lisis de calidad encuentra problemas, CORR√çGELOS antes de continuar
"""
        
        goal_section = f"\nTu objetivo es: {user_goal}"
        
    else:  # English
        system_msg = """
You are an autonomous AI agent specialized in high-quality programming and development tasks.

FUNDAMENTAL RULES:
1. ALWAYS think step by step before acting
2. Use available tools to complete the task
3. ALWAYS verify the results of your actions
4. If something fails, try an alternative solution
5. MAINTAIN code quality as the maximum priority
"""
        
        if reflection_enabled and ADVANCED_FEATURES:
            system_msg += """
6. USE reflection tools to evaluate code quality:
   - analyze_code_quality() for complete analysis
   - lint_code() to check syntax and style errors
   - check_best_practices() for best practices
   - check_solid_principles() for SOLID principles
   - check_dry_principle() for DRY principle
   - run_tests() to verify tests pass
7. NEVER deliver code without verifying it with quality tools
8. If quality analysis finds issues, FIX them before continuing
"""
        
        goal_section = f"\nYour objective is: {user_goal}"
    
    return f"""
{tools.TOOL_DESCRIPTIONS}

{system_msg}
{goal_section}

HISTORIAL DE CONVERSACI√ìN:
{conversation_history}

RESPONDE EN EL SIGUIENTE FORMATO:

Thought:
[Tu razonamiento paso a paso sobre qu√© hacer a continuaci√≥n]

Action:
[La llamada a la herramienta que has decidido usar, p.ej. write_file('hello.txt', 'Hola Agente')]

Respuesta:
"""


def run_agent(user_goal, max_steps=10, verbose=False, model_key=None, enable_reflection=True, enable_human_loop=True, language="es"):
    """Ejecuta el agente para completar una tarea."""
    print(f"ü§ñ Iniciando agente de codificaci√≥n avanzado...")
    print(f"üìã Objetivo: {user_goal}")
    
    # Configuraci√≥n
    config = load_model_config()
    if enable_reflection and ADVANCED_FEATURES:
        print("üîç Reflexi√≥n de c√≥digo: ACTIVADA")
    if enable_human_loop and ADVANCED_FEATURES:
        print("ü§ù Human-in-the-loop: ACTIVADO")
    
    print("-" * 50)
    
    # Crear sistema human-in-the-loop
    human_loop = None
    if enable_human_loop and ADVANCED_FEATURES:
        human_loop = create_human_loop(language=language, auto_approve=False)
    
    # Cargar el modelo
    model, tokenizer = load_model(model_key)
    
    # Historial de conversaci√≥n
    conversation_history = ""
    
    # Bucle principal del agente
    for step in range(1, max_steps + 1):
        print(f"\nüîÑ Paso {step}/{max_steps}")
        
        # Construir el prompt
        prompt = build_prompt(user_goal, conversation_history, enable_reflection, language)
        
        # Obtener respuesta del modelo
        if verbose:
            print("\n--- Prompt enviado al modelo ---")
            print(prompt[-500:] + "..." if len(prompt) > 500 else prompt)
            print("--- Fin del prompt ---\n")
        
        raw_response = generate_response(model, tokenizer, prompt)
        print(f"\nüí≠ Respuesta del modelo:")
        print(raw_response)
        
        # Analizar la acci√≥n
        function_name, args = parse_action(raw_response)
        
        if function_name and function_name in tools.AVAILABLE_TOOLS:
            print(f"\nüîß Acci√≥n propuesta: {function_name}({', '.join(args)})")
            
            # Human-in-the-loop: solicitar aprobaci√≥n para acciones importantes
            if human_loop and function_name in ['write_file', 'run_terminal_command', 'create_directory']:
                approval = human_loop.request_approval(
                    title=f"Aprobar acci√≥n: {function_name}",
                    description=f"El agente quiere ejecutar: {function_name}({', '.join(args)})\n\nRazonamiento: {raw_response.split('Action:')[0].replace('Thought:', '').strip()}",
                    context={"step": step, "function": function_name, "args": args}
                )
                
                if not approval.approved:
                    print("‚ùå Acci√≥n rechazada por el usuario")
                    if approval.feedback:
                        print(f"üí≠ Feedback: {approval.feedback}")
                        conversation_history += f"\nPaso {step} - Acci√≥n rechazada:\n"
                        conversation_history += f"Acci√≥n propuesta: {function_name}({', '.join(args)})\n"
                        conversation_history += f"Feedback del usuario: {approval.feedback}\n"
                        conversation_history += "El usuario rechaz√≥ la acci√≥n. Considera el feedback e intenta un enfoque diferente.\n"
                        continue
                    else:
                        break
            
            # Ejecutar la herramienta
            function_to_call = tools.AVAILABLE_TOOLS[function_name]
            
            try:
                tool_result = function_to_call(*args)
                print(f"üì§ Resultado: {tool_result}")
                
                # Reflexi√≥n autom√°tica en archivos de c√≥digo creados/modificados
                if (enable_reflection and ADVANCED_FEATURES and 
                    function_name == 'write_file' and 
                    len(args) >= 1 and 
                    args[0].endswith(('.py', '.js', '.ts', '.java', '.cpp', '.c'))):
                    
                    print(f"\nüîç Ejecutando reflexi√≥n autom√°tica en {args[0]}...")
                    reflection_result = tools.analyze_code_quality(args[0], "all")
                    print(reflection_result)
                    
                    # Si hay problemas cr√≠ticos, solicitar revisi√≥n humana
                    if human_loop and ("‚ùå FALL√ì" in reflection_result or "Error" in reflection_result):
                        review = human_loop.request_reflection_review(
                            reflection_results=[],  # Simplificado para esta demo
                            proposed_action=f"Continuar con el archivo {args[0]} que tiene problemas de calidad",
                            context={"reflection_output": reflection_result}
                        )
                        
                        if review.selected_option == "modificar":
                            print("üîß Usuario solicit√≥ modificaciones al c√≥digo")
                            conversation_history += f"\nReflexi√≥n de calidad encontr√≥ problemas en {args[0]}:\n{reflection_result}\n"
                            conversation_history += "El usuario solicit√≥ modificaciones. Corrige los problemas identificados.\n"
                            continue
                        elif review.selected_option == "abortar":
                            print("üõë Usuario solicit√≥ abortar")
                            break
                
                # Actualizar historial
                conversation_history += f"\nPaso {step}:\n"
                conversation_history += f"Thought: {raw_response.split('Action:')[0].replace('Thought:', '').strip()}\n"
                conversation_history += f"Action: {function_name}({', '.join(args)})\n"
                conversation_history += f"Result: {tool_result}\n"
                
                # Verificar si la tarea se complet√≥
                if any(keyword in tool_result.lower() for keyword in ['exitosamente', '√©xito', 'completado', 'creado']):
                    print("\n‚úÖ ¬°Tarea completada exitosamente!")
                    
                    # Reflexi√≥n final si se crearon archivos
                    if enable_reflection and ADVANCED_FEATURES:
                        print("\nüîç Ejecutando reflexi√≥n final...")
                        # Buscar archivos Python creados
                        py_files = []
                        for line in conversation_history.split('\n'):
                            if 'write_file(' in line and '.py' in line:
                                # Extraer nombre del archivo
                                match = re.search(r"write_file\('([^']+\.py)'", line)
                                if match:
                                    py_files.append(match.group(1))
                        
                        for py_file in py_files:
                            if Path(py_file).exists():
                                print(f"\nüìä An√°lisis final de {py_file}:")
                                final_analysis = tools.analyze_code_quality(py_file, "all")
                                print(final_analysis)
                    
                    return True
                    
            except Exception as e:
                error_msg = f"Error al ejecutar la herramienta: {e}"
                print(f"‚ùå {error_msg}")
                
                # Human-in-the-loop para resoluci√≥n de errores
                if human_loop:
                    resolution = human_loop.request_error_resolution(
                        error=str(e),
                        attempted_action=f"{function_name}({', '.join(args)})",
                        context={"step": step}
                    )
                    
                    if resolution.selected_option == "abortar":
                        print("üõë Usuario decidi√≥ abortar debido al error")
                        break
                    elif resolution.selected_option == "modificar":
                        conversation_history += f"\nError en paso {step}: {error_msg}\n"
                        conversation_history += "El usuario solicit√≥ modificar el enfoque debido al error.\n"
                        continue
                
                conversation_history += f"\nPaso {step}:\n"
                conversation_history += f"Action: {function_name}({', '.join(args)})\n"
                conversation_history += f"Error: {error_msg}\n"
        else:
            print("‚ùå El modelo no proporcion√≥ una acci√≥n v√°lida.")
            break
    
    print(f"\n‚ö†Ô∏è Agente detenido despu√©s de {max_steps} pasos.")
    return False


def main():
    parser = argparse.ArgumentParser(
        description="Coding Agent - Agente de IA avanzado para tareas de programaci√≥n",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python main.py "Crea un archivo hello.py que imprima 'Hola Mundo'"
  python main.py "Lista todos los archivos .py en el directorio actual"
  python main.py --interactive --model codellama-13b
  python main.py --list-models
  python main.py --select-model deepseek-33b
        """
    )
    
    parser.add_argument(
        "goal",
        nargs="?",
        help="Objetivo o tarea que el agente debe completar"
    )
    
    parser.add_argument(
        "-i", "--interactive",
        action="store_true",
        help="Modo interactivo - permite introducir m√∫ltiples tareas"
    )
    
    parser.add_argument(
        "-s", "--steps",
        type=int,
        default=10,
        help="N√∫mero m√°ximo de pasos (default: 10)"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Modo verbose - muestra m√°s detalles del proceso"
    )
    
    parser.add_argument(
        "-m", "--model",
        type=str,
        help="Modelo a usar (ej: deepseek-6.7b, codellama-13b, deepseek-33b)"
    )
    
    parser.add_argument(
        "--list-models",
        action="store_true",
        help="Lista todos los modelos disponibles"
    )
    
    parser.add_argument(
        "--select-model",
        type=str,
        help="Selecciona y configura un modelo por defecto"
    )
    
    parser.add_argument(
        "--no-reflection",
        action="store_true",
        help="Desactiva el sistema de reflexi√≥n de c√≥digo"
    )
    
    parser.add_argument(
        "--no-human-loop",
        action="store_true",
        help="Desactiva human-in-the-loop (modo autom√°tico)"
    )
    
    parser.add_argument(
        "--language",
        choices=["es", "en"],
        default="es",
        help="Idioma de la interfaz (es/en)"
    )
    
    args = parser.parse_args()
    
    # Manejar comandos especiales
    if args.list_models:
        models = list_available_models()
        print("\nüß† MODELOS DISPONIBLES:")
        print("=" * 50)
        
        for key, info in models.items():
            status = "‚úÖ Recomendado" if info.get("recommended") else ""
            if info.get("fits_in_memory"):
                memory_status = "üíö Compatible con tu memoria"
            else:
                memory_status = f"‚ö†Ô∏è Requiere {info['memory_gb']}GB (puede ser lento)"
            
            print(f"\nüîπ {key}")
            print(f"   Nombre: {info['name']}")
            print(f"   Tama√±o: {info['size']}")
            print(f"   Memoria: {info['memory_gb']}GB - {memory_status}")
            print(f"   Descripci√≥n: {info['description_es' if args.language == 'es' else 'description']}")
            if status:
                print(f"   {status}")
        
        print(f"\nüí° Usa --select-model <modelo> para cambiar el modelo por defecto")
        return 0
    
    if args.select_model:
        if select_model(args.select_model):
            print(f"‚úÖ Modelo {args.select_model} seleccionado como predeterminado")
        else:
            print(f"‚ùå Modelo {args.select_model} no v√°lido. Usa --list-models para ver opciones")
            return 1
        return 0
    
    # Configuraci√≥n de caracter√≠sticas
    enable_reflection = not args.no_reflection and ADVANCED_FEATURES
    enable_human_loop = not args.no_human_loop and ADVANCED_FEATURES
    
    if not ADVANCED_FEATURES:
        print("‚ö†Ô∏è Caracter√≠sticas avanzadas no disponibles. Instalando dependencias...")
        print("   Las funciones de reflexi√≥n y human-in-the-loop estar√°n limitadas.")
    
    # Modo interactivo
    if args.interactive:
        if args.language == "es":
            print("üîÑ Modo interactivo activado. Escribe 'quit' para salir.")
            print("üîß Comandos especiales:")
            print("   'config' - Cambiar configuraci√≥n")
            print("   'models' - Ver modelos disponibles") 
            print("   'reflection on/off' - Activar/desactivar reflexi√≥n")
            print("   'human-loop on/off' - Activar/desactivar human-in-the-loop")
        else:
            print("üîÑ Interactive mode activated. Type 'quit' to exit.")
            print("üîß Special commands:")
            print("   'config' - Change configuration")
            print("   'models' - View available models")
            print("   'reflection on/off' - Enable/disable reflection")
            print("   'human-loop on/off' - Enable/disable human-in-the-loop")
        
        while True:
            try:
                prompt_text = "\nüìù Ingresa tu objetivo: " if args.language == "es" else "\nüìù Enter your goal: "
                goal = input(prompt_text).strip()
                
                if goal.lower() in ['quit', 'exit', 'salir']:
                    print("üëã ¬°Hasta luego!" if args.language == "es" else "üëã Goodbye!")
                    break
                elif goal.lower() == 'config':
                    print(f"üîß Reflexi√≥n: {'ON' if enable_reflection else 'OFF'}")
                    print(f"ü§ù Human-in-loop: {'ON' if enable_human_loop else 'OFF'}")
                    print(f"üåê Idioma: {args.language}")
                    continue
                elif goal.lower() == 'models':
                    models = list_available_models()
                    for key, info in models.items():
                        status = " (actual)" if info.get("recommended") else ""
                        print(f"   {key}: {info['size']}{status}")
                    continue
                elif goal.startswith('reflection '):
                    action = goal.split(' ')[1].lower()
                    if action == 'on':
                        enable_reflection = True and ADVANCED_FEATURES
                        print("‚úÖ Reflexi√≥n activada")
                    elif action == 'off':
                        enable_reflection = False
                        print("‚ùå Reflexi√≥n desactivada")
                    continue
                elif goal.startswith('human-loop '):
                    action = goal.split(' ')[1].lower()
                    if action == 'on':
                        enable_human_loop = True and ADVANCED_FEATURES
                        print("‚úÖ Human-in-the-loop activado")
                    elif action == 'off':
                        enable_human_loop = False
                        print("‚ùå Human-in-the-loop desactivado")
                    continue
                
                if goal:
                    run_agent(
                        goal, 
                        args.steps, 
                        args.verbose, 
                        args.model,
                        enable_reflection,
                        enable_human_loop,
                        args.language
                    )
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta luego!" if args.language == "es" else "\nüëã Goodbye!")
                break
                
    elif args.goal:
        run_agent(
            args.goal, 
            args.steps, 
            args.verbose, 
            args.model,
            enable_reflection,
            enable_human_loop,
            args.language
        )
    else:
        parser.print_help()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())